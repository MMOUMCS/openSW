The cost-effective System
     for your trip  


[ Revision history ]
03/29/2024  0.00  The basic design



= Contents =




1. Business purpose ..............................................................................

2. System context diagram .....................................................................

3. Use case list ....................................................................................

4. Concept of operation ............................................................................ 

5. Problem statement ................................................................................

6. Glossary ..........................................................................................

7. References .........................................................................................


1. Business purpose
	1.1 project background/motivation

(그림 2) JR 훗카이도 여객철도 주식회사 속 공식 JR패스 홍보사진

 ‘교통패스’는 특정 기간동안 자유롭게 교통을 이용하고 일대의 박물관, 유적, 그리고 기념품점 등에서 할인가 또는 무료로 이용할 수 있도록 제작된 편의제품이다. 최근 일본 여행을 하며 수없이 나누어진 교통편과 많은 교통패스에 선택의 어려움을 느꼈다. 일본은 교통의 소유권이 여러 회사에 분산됨에 따라 패스의 종류와 사용할 수 있는 교통기관이 달라지는 불편함에 일본 여행객들은 어려움을 겪는다. 또한 여행객은 입장료와 교통비가 패스를 이용하는 것 보다 효율적일지 고려해야하는 과정도 필요하다.
 이러한 불편함과 번거로움을 해결하기 위해 경로를 설정하면 가장 효율적으로 사용할 수 있는 패스를 추천해주고, 각종 패스 혹은 교통비를 계산하여 소비자에게 알려주는 방식을 채택하는 프로젝트를 구성했다. The cost-effective System은 여러 경로 중 ‘가장 빠르고’, ‘가장 가성비있게’ 사용 할 수 있는 경로를 구상한다. 이 때 소비자가 자신이 여행할 경로를 설정하고 입력하면 The System은 걸리는 시간, 비용, 거리를 계산해주고 소비자에게 제공해준다. ‘시간’, ‘비용’, ‘인기’ 등의 정렬 기준을 설정하여 소비자로 하여금 맞춤형 상품을 제공할 수 있도록 한다. 이를 통해 해외여행에 대하여 미숙한 여행객들도 편안하게 사용할 수 있게 돕는다. 
 시작은 일본의 패스로 하였으나, 후에 조금씩 늘려가서 한국, 부산, 유럽, 타이완 등의 패스도 설명하고 제공할 수 있는 어플로 거듭날 것 이다. 


	1.2 Goals
 해외의 교통에 거의 알지 못하는 여행객들에게 자신에게 맞는 교통패스를 추천해주고 비용을 미리 알 수 있게 함으로써 해외여행에 대한 거리감을 줄이고 편리성을 극대화 할 수 있도록 한다. 

	1.3 Target Market
 해외 여행을 처음 가보고, 해외의 문화에 대해 잘 모르는 사람.
 더 나은 교통편을 빠르고 편리하게 알고싶은 사람.


2. System context diagram

● Rout Set		경로 설정
	Rout City		경로 도시 설정

● Sort Rule		경로 탐색시 우선순위 
	Rout Time	시간 우선순위
	Rout Cost	비용 우선순위
	Rout Transfer	환승 횟수

● Rout Load	경로 탕색 로딩
	Google Request		구글 길찾기에 출발지, 도착지 설정 후 모든 경로 UPDATE
	Cost Value Request	각 길찾기 당 패스 교통 사용 max번 구하기
	Cost Recommand	위에서 찾은 ‘max‘에 해당하는 길 전송
	Time Value Request	각 길찾기 당 최소 시간 채택하여 찾은 길 전송
	Transfer Request	각 길찾기 당 최소 환승 횟수 중 가장 위에 있는 길 전송  

● Rout Count	각 패스 당 경로 사용 수
	Recommand Count Data 전송받은 Data를 기준으로 해당 패스를 사용하는 횟수 전송

● Rout Time	각 경로 당 시간 탐색
	Recommand Time Data 전송받은 Data를 기준으로 해당 예상 시간 전송



3. Use case list
1) Rout Set

Actor
User, Server(manager)
Description
유저가 경로를 설정한다. (출발점, 도착점 지정)

1-1) Rout City

Actor
User, Server(manager)
Description
유저가 경로를 설정한다. 이 때 유저가 도시를 설정하여 조금 더 빠르게 계산할 수 있도록 돕는다.

2) Sort Rule

Actor
User, Server(manager)
Description
유저가 정렬 우선순위를 정한다. 

2-1) Rout Time

Actor
User, Server(manager)
Description
유저가 정렬 우선순위 중 시간을 고른다. 데이터 중 ‘time’이 가장 적은걸 우선순위로 한다.

2-2) Rout Cost

Actor
User, Server(manager)
Description
유저가 정렬 우선순위 중 비용을 고른다. 데이터 중 ‘Cost’가 가장 적은걸 우선순위로 한다.

2-3) Rout Transfer

Actor
User, Server(manager)
Description
유저가 정렬 우선순위 중 환승횟수를 고른다. 데이터 중 ‘Transfer’이 가장 작은걸 우선순위로 한다.

3) Rout Load

Actor
Server(manager), Google
Description
Google에서 데이터를 읽어들인다

3-1) Google Request

Actor
Server(manager), Google
Description
Google 길찾기에 출발점과 도착점을 입력하여 나온 경로들을 받아온다. 

3-2 Cost Value Request

Actor
Server(manager), Google
Description
받아온 경로 중 교통패스에 해당되는 경로를 Count한다. 

3-3)Cost Recommand

Actor
Server(manager), Google
Description
위 Cost Value Request에서 받아온 max 교통패스를 전송한다.

3-4)Time Value Request

Actor
Server(manager), Google
Description
받아온 경로 중 예상시간이 가장 짧은 것을 골라 전송한다.

3-5)Transfer Request

Actor
Server(manager), Google
Description
받아온 경로 중 1)환승 횟수가 가장 작은 것 중 2) 가장 위 (즉, 예상시간이 짧은 것)을 전송한다.

4)Rout Count

Actor
Server(manager), User, System
Description
google로부터 받아온 Count 정보를 기반으로 정보를 User에게 전송

5)Rout Time

Actor
Server(manager), User, System
Description
google로부터 받아온 Time 정보를 기반으로 정보를 User에게 전송



4. Concept of operation
1) Rout Set

Purpose
사용자가 가려는 출발지와 도착지를 입력받기 위함
Approach
사용자가 앱을 실행 후 출발지와 도착지를 입력하면 그것을 System으로 전송시킴. 이때 출발지와 도착지가 Google에 입력했을 때 주소로 뜨지 않으면 오류 메시지를 띄운 후 재입력하도록 함.
Dynamics
앱 실행 시 데이터를 입력할 경우.
Goals
출발지와 도착지를 google이 확인할 수 있도록 입력받기 위함.

2) Sort Rule

Purpose
사용자가 원하는 정렬 기준을 설정하기 위함
Approach
사용자가 앱을 실행 후 정렬 기준을 선택하여 정렬되도록 하기 위함. 시간, 비용, 환승 횟수를 기준으로 정렬함.
Dynamics
데이터를 입력하고 난 후 버튼을 누름.
Goals
정렬 기준을 정해서 사용자가 원하는 정보를 알려주기 위함.

3) Rout Load

Purpose
Google에게 정보를 받아오고 각 기준마다 최적의 경로를 찾아내기 위함
Approach
Google에게서 경로들을 받아오고 정렬 기준으로 가장 최적의 경로를 찾아낸다. Time의 경우 예상 시간이 가장 적은 경로들을 찾아 계산 후 제공, Cost의 경우에는 각 패스의 사용량을 조사하고 그 중 가장 많은 교통패스권을 알려주기 위해 제공, Transfer의 경우 환승횟수 중 가장 빠른걸 알려주기 위해 제공. 
Dynamics
버튼이 눌렸을 때 Google에게 정보요청
Goals
정렬 기준으로 정보를 계산하고 정리하기 위함.

4) Rout Cout/Time

Purpose
받아온 정보를 User에게 알맞은 UI로 정보 제공
Approach
받아온 정보를 사용자가 확인하기 쉽도록 정리된 UI로 제공함.
Dynamics
Server로부터 정보가 도착함.
Goals
사용자에게 결과 데이터를 전달하기 위함.




5. Problem statement

OverView
 어플로 작동하게 만들기 위해 어플 제작 지식이 기본적으로 필요할 것이다. 또한 각종 서버, 계산, 제공 비용에 대한 고려도 해야한다. 서버 매니저를 통해서 적절한 알고리즘으로 최단 경로를 계산하게 되는데 이것에 대한 구현 기간도 충분해야 할 것이다. 

Problem 1. Sort Algorithm
	각 경로 중 가장 많은 패스를 찾아낼 때 가장 빠르고 비용이 적은 알고리즘을 선택해야한다. 이 때 여러 알고리즘을 적용해보고 가장 효율적인 알고리즘을 찾아내는 방법이 필요하다.

Problem 2. Cost Algorithm 
	매번 경로를 입력받고 출력할때마다 비용이 들게 되는데, 여러 사람이 이 계산을 요구하게 되면 서버의 비용이 너무 커진다. 이 과정에서 계산하는 것에 사용된 메모리들은 다른 클라이언트들을 처리하지 못하고 딜레이가 생기게 된다. 이러한 이유탓에 개개인의 클라이언트에게 이 비중을 나눔할 수 밖에 없게되는데 이에대해 자세한 공부가 필요하다.

Problom 3. Preliminary Investigation
교통패스마다 적용되는 교통수단에 대한 사전자료 수집이 필요하다. 


NFRs
1) 빠르고 편안하게 크롤링 및 계산하기 위해 Python을 사용합니다.
2) 동시에 어플리케이션 개발언어는 Kotlin을 사용합니다. 
3) 빠른 검색을 위해 google api와 연동하여 사용합니다.
4) 검색이 많은 길의 경우 서버에 저장해놓고 빠르고 간편하게 제공합니다.



6. Glossary

Term
Describe
The cost-effective System
가성비 있는 시스템이라는 뜻으로 가장 가성비 있게 해외여행 교통패스를 추천하는 이 앱의 이름이다.
Server(manager)
서버에 데이터를 저장함의 기능과, 각 비용을 계산하는 MANAGER 기능을 통틀어서 말한다. 계산과 전송을 담당한다. 
클라이언트(User)
해당 앱을 사용하는 사용자를 뜻한다. 경로를 검색하고 데이터를 받는 대상이다.
Google 길찾기
데이터 정보를 얻기위해 크롤링 해야하는 대상이다. 관련 API를 사용하기도 한다.





7. References
그림1) 아이콘
그림2) JR패스 홍보사진



